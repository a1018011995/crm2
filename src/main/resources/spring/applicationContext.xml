<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
		
<!-- 加载配置文件 -->
<context:property-placeholder location="classpath:db.properties"/>

<!-- 扫描所有带有 @Service
	@Component
	@Repository 
	@Controller
	的class 然后实例化他们-->
	
<context:component-scan base-package="com.doocker.crm.service.impl"/>

<!-- 配置数据源 连接池 -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${jdbc.driver}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
</bean>

<!-- 配置sqlsessionfactory-->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
</bean>

<!-- 配置mapper扫描器 生成mapper借口的代理对象 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.doocker.crm.mapper"/>
	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
</bean>

<!-- 配置事务管理器，管理事务 对于修改多张表的操作要保证同时成功或者同时失败-->
<bean id="tranactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

<!-- 事务的通知，如果修改数据库的方法抛出异常，用来回滚数据操作 -->
<tx:advice id="advice" transaction-manager="tranactionManager">
	<tx:attributes>
		<tx:method name="insert*" propagation="REQUIRED"/>
		<tx:method name="update*" propagation="REQUIRED"/>
		<tx:method name="delete*" propagation="REQUIRED"/>
	</tx:attributes>
</tx:advice>

<!-- 切面 一般切面在service层  -->
<aop:config>
	<aop:advisor advice-ref="advice" pointcut="execution(* com.doocker.crm.service.*.*(..))"/>
</aop:config>
</beans>